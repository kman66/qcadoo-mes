<?xml version="1.0" encoding="UTF-8"?>
<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo MES
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_BASE_FUNCTIONALITY" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="qualityControlReport"
	modelPlugin="qualityControls"
	modelName="qualityControl"
	menuAccessible="true">
	
	<component type="window" name="window" reference="window">
		<ribbon>
			<group name="reportsForOrder">
				<smallButton name="pdfOrder" icon="pdfIcon16.png"
					action="#{form}.fireEvent(printQualityControlReport,pdf,order);"
					state="disabled" />
				<smallButton name="xlsOrder" icon="xlsIcon16.png"
					action="#{form}.fireEvent(printQualityControlReport,xls,order);"
					state="disabled" />
			</group>
			<group name="reportsForUnit">
				<smallButton name="pdfUnit" icon="pdfIcon16.png"
					action="#{form}.fireEvent(printQualityControlReport,pdf,unit);"
					state="disabled" />
				<smallButton name="xlsUnit" icon="xlsIcon16.png"
					action="#{form}.fireEvent(printQualityControlReport,xls,unit);"
					state="disabled" />
			</group>
		</ribbon>
		<component type="form" name="qualityControlReport"
			reference="form">
			<component type="gridLayout" name="gridLayout" columns="3"
				rows="2" hasBorders="false">
				<layoutElement column="1" row="1">
					<component type="calendar" name="dateFrom" reference="dateFrom"
						defaultEnabled="true">
						<script>
							<![CDATA[
								var pdfOrder = #{window}.getRibbonItem("reportsForOrder.pdfOrder");
								var xlsOrder = #{window}.getRibbonItem("reportsForOrder.xlsOrder");
								var pdfUnit = #{window}.getRibbonItem("reportsForUnit.pdfUnit");
								var xlsUnit = #{window}.getRibbonItem("reportsForUnit.xlsUnit");
								var dateToElement = #{dateTo};
								this.performUpdateState();
								this.addOnChangeListener({
									onChange: function(selectedValue) {
										this.performUpdateState();
										if (selectedValue != null && selectedValue != 0) {
											var dateTo = dateToElement.getDate();
											if (dateTo == 0) {
												dateToElement.setDate(selectedValue);
											} else if (dateTo == null) {
												pdfOrder.disable();
												xlsOrder.disable();
												pdfUnit.disable();
												xlsUnit.disable();
											} else {
												pdfOrder.enable();
												xlsOrder.enable();
												pdfUnit.enable();
												xlsUnit.enable();
											}
										} else {
											pdfOrder.disable();
											xlsOrder.disable();
											pdfUnit.disable();
											xlsUnit.disable();
										}
									}
								});
							]]>
						</script>
					</component>
				</layoutElement>
				<layoutElement column="1" row="2">
					<component type="calendar" name="dateTo" reference="dateTo"
						defaultEnabled="true">
						<script>
							<![CDATA[
								var pdfOrder = #{window}.getRibbonItem("reportsForOrder.pdfOrder");
								var xlsOrder = #{window}.getRibbonItem("reportsForOrder.xlsOrder");
								var pdfUnit = #{window}.getRibbonItem("reportsForUnit.pdfUnit");
								var xlsUnit = #{window}.getRibbonItem("reportsForUnit.xlsUnit");
								var dateFromElement = #{dateFrom};
								this.performUpdateState();
								this.addOnChangeListener({
									onChange: function(selectedValue) {
										this.performUpdateState();
										if (selectedValue != null && selectedValue != 0) {
											var dateFrom = dateFromElement.getDate();
											if (dateFrom == 0) {
												dateFromElement.setDate(selectedValue);
											} else if (dateFrom == null) {
												pdfOrder.disable();
												xlsOrder.disable();
												pdfUnit.disable();
												xlsUnit.disable();
											} else {
												pdfOrder.enable();
												xlsOrder.enable();
												pdfUnit.enable();
												xlsUnit.enable();
											}
										} else {
											pdfOrder.disable();
											xlsOrder.disable();
											pdfUnit.disable();
											xlsUnit.disable();
										}
									}
								});
							]]>
						</script>
					</component>
				</layoutElement>
			</component>
			<option type="header" value="true" />
			<option type="expression" value="' '" />
			<listener event="printQualityControlReport"
				class="com.qcadoo.mes.qualityControls.print.QualityControlsReportService"
				method="printQualityControlReport" />
		</component>
	</component>
	<hooks>
		<beforeRender class="com.qcadoo.mes.qualityControls.QualityControlService"
			method="enableCalendarsOnRender" />
	</hooks>
</view>